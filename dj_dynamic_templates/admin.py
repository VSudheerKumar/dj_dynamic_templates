import datetimeimport shutilfrom django.contrib import adminfrom django.urls import pathfrom django.utils.html import format_htmlfrom django.contrib import messagesfrom types import SimpleNamespacefrom markdownx.admin import MarkdownxModelAdminfrom .views import *from .utils import CategoryModelAdminUtils, MailTemplateModelAdminUtils# Register your models here.class BaseModelAdmin(admin.ModelAdmin):    readonly_fields = ('code',)    exclude = ('created_by',)    def has_change_permission(self, request, obj=None):        return super(BaseModelAdmin, self).has_change_permission(request, obj) and (obj.is_active if obj else True)    def has_delete_permission(self, request, obj=None):        return super(BaseModelAdmin, self).has_change_permission(request, obj) and (obj.is_active if obj else True)    def save_model(self, request, obj, form, change):        if hasattr(self, '_pre_save_model'):            self._pre_save_model(request, obj, form, change)        obj.created_by = request.user        response = super(BaseModelAdmin, self).save_model(request, obj, form, change)        if hasattr(self, '_post_save_model'):            self._post_save_model(request, obj, form, change)        return response    def delete_queryset(self, request, queryset):        for obj in queryset:            self.delete_model(request, obj)@admin.register(Category)class CategoryModelAdmin(BaseModelAdmin, CategoryModelAdminUtils):    list_display = ('id', 'app_name', 'name', 'code', 'is_directory_exist',)    list_filter = ['app_name', 'code']    actions = ('create_directory', )    search_fields = ('name', )    def has_delete_permission(self, request, obj=None):        return True    def get_readonly_fields(self, request, obj=None):        readonly_fields = self.readonly_fields        if obj:            readonly_fields += ('created_by', 'is_directory_exist', 'files_in_directory')        return readonly_fields    # actions    def delete_model(self, request, obj):        if self._pre_delete_model(request, obj):            return super(CategoryModelAdmin, self).delete_model(request, obj)        return None@admin.register(MailTemplate)class MailTemplateModelAdmin(BaseModelAdmin, MarkdownxModelAdmin, MailTemplateModelAdminUtils):    actions = ('sync_templates', 'hard_delete')    exclude = ('created_by', 'code', )    list_display = ('id', 'name', 'category', 'is_active', 'code', 'template_status',)    list_filter = ('category__name', 'is_active', 'code',)    search_fields = ('name', )    template_blocks = ['{% block style %}', '{% block script %}', '{% block content %}']    template_check_props = {        'style_props': SimpleNamespace(length_of_start_key=len(template_blocks[0])),        'script_props': SimpleNamespace(length_of_start_key=len(template_blocks[1])),        'body_props': SimpleNamespace(length_of_start_key=len(template_blocks[2]))    }    def get_readonly_fields(self, request, obj=None):        readonly_fields = self.readonly_fields        if obj:            readonly_fields += ('created_by', 'template', 'template_status', 'parent_obj')        return readonly_fields    #delete    def _post_delete_model(self, request, obj):        try:            os.remove(obj.get_template_path())        except FileNotFoundError:            pass        return True    # urls    def get_urls(self):        urls = super(MailTemplateModelAdmin, self).get_urls()        return [path('template-view/<int:template_code>/', mail_template_view)] + urls